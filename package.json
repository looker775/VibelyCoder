
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs');
const dotenv = require('dotenv');
const { exec } = require('child_process');

dotenv.config();

let mainWindow;

// === 📂 Setup project file path ===
const userDataPath = path.join(process.env.APPDATA || __dirname, 'VibelyCoder');
if (!fs.existsSync(userDataPath)) fs.mkdirSync(userDataPath, { recursive: true });
const projectFile = path.join(userDataPath, 'project.json');

// === 🪟 Create Electron Window ===
function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: false,
      contextIsolation: true
    }
  });

  const indexPath = path.join(__dirname, 'index.html');
  if (fs.existsSync(indexPath)) {
    mainWindow.loadFile(indexPath);
  } else {
    mainWindow.loadURL('data:text/html;charset=utf-8,' +
      encodeURIComponent('<h1>🚀 VibelyCoder Dev Window</h1><p>index.html not found</p>'));
  }

  if (!app.isPackaged) mainWindow.webContents.openDevTools();
}

app.whenReady().then(createWindow);
app.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit(); });
app.on('activate', () => { if (BrowserWindow.getAllWindows().length === 0) createWindow(); });


// === 💬 AI CHAT (GPT‑4.1 & Claude) ===
ipcMain.handle('ai:chat', async (_event, msg) => {
  console.log(`🤖 User asked AI: ${msg}`);
  try {
    const openai = (await import('openai')).default;
    const client = new openai({ apiKey: process.env.OPENAI_KEY });

    const response = await client.chat.completions.create({
      model: "gpt-4.1",
      messages: [{ role: "user", content: msg }]
    });

    return response.choices[0].message.content;

    // Claude fallback (optional)
    // const fetch = (await import('node-fetch')).default;
    // const claudeRes = await fetch("https://api.anthropic.com/v1/messages", {
    //   method: "POST",
    //   headers: {
    //     "Content-Type": "application/json",
    //     "x-api-key": process.env.CLAUDE_API_KEY
    //   },
    //   body: JSON.stringify({
    //     model: "claude-3-opus-20240229",
    //     max_tokens: 400,
    //     messages: [{ role: "user", content: msg }]
    //   })
    // });
    // const claudeData = await claudeRes.json();
    // return claudeData.content[0].text;
  } catch (err) {
    console.error("❌ AI Chat Error:", err);
    return "⚠️ Error connecting to AI.";
  }
});


// === 💾 SAVE PROJECT ===
ipcMain.handle('project:save', async (_event, data) => {
  try {
    fs.writeFileSync(projectFile, JSON.stringify(data, null, 2));
    console.log("✅ Project saved to:", projectFile);
    return { success: true };
  } catch (err) {
    console.error("❌ Save error:", err);
    return { success: false, error: err.message };
  }
});


// === 📂 LOAD PROJECT ===
ipcMain.handle('project:load', async () => {
  try {
    if (!fs.existsSync(projectFile)) return { success: false, error: "No project saved yet." };
    const content = JSON.parse(fs.readFileSync(projectFile, 'utf-8'));
    return { success: true, data: content };
  } catch (err) {
    console.error("❌ Load error:", err);
    return { success: false, error: err.message };
  }
});


// === 🚀 BUILD & DEPLOY HANDLER ===
ipcMain.handle('project:build', async () => {
  try {
    console.log("🔨 Running build-desktop.js...");
    await runCommand('node build-desktop.js');

    // ✅ Deploy to Render if env exists
    if (process.env.RENDER_DEPLOY) {
      console.log("🌐 Deploying to Render...");
      await runCommand(process.env.RENDER_DEPLOY);
    }

    // ✅ Deploy to Vercel
    if (process.env.VERCEL_DEPLOY) {
      console.log("🌐 Deploying to Vercel...");
      await runCommand(process.env.VERCEL_DEPLOY);
    }

    // ✅ Deploy to Netlify
    if (process.env.NETLIFY_DEPLOY) {
      console.log("🌐 Deploying to Netlify...");
      await runCommand(process.env.NETLIFY_DEPLOY);
    }

    return { success: true, message: "✅ Build and deployment complete." };
  } catch (err) {
    console.error("❌ Build error:", err);
    return { success: false, error: err.message };
  }
});


// === 🛠️ Run shell command helper ===
function runCommand(cmd) {
  return new Promise((resolve, reject) => {
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        console.error(stderr || error.message);
        return reject(new Error(stderr || error.message));
      }
      resolve(stdout);
    });
  });
}

